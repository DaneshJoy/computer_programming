# -*- coding: utf-8 -*-
"""numpy_matplotlib.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1p0reamlXj837ihItsoyOIyi7yAJwbv1c
"""

import numpy as np
import matplotlib.pyplot as plt

"""## Numpy ndarray"""

my_arr = np.array([1, 2, 3, 4, 5])
my_arr * 2

type(my_arr)

"""## Get array properties"""

my_arr.ndim

my_arr.shape

my_arr.dtype

my_arr2 = np.array([[1, 2, 3, 4, 5]])
my_arr2.shape

"""## More dimentions"""

my_arr3 = np.array([[1, 2, 3],
                    [4, 5, 6]])
my_arr3.shape

print(my_arr3)

"""## Vector operations"""

arr1 = np.array([1, 2, 3])
arr2 = np.array([2, 2, 2])

dot_product = np.dot(arr1, arr2)
vector_multiplication = arr1 * arr2
print("Dot product:", dot_product)
print("Vector multiplication:", vector_multiplication)

"""## Create zero/one ndarrays"""

zeros = np.zeros([2, 2, 2])
zeros

ones = np.ones([2, 3, 2])
ones

ones.shape

x = np.random.normal(size=(2, 3))
x

x.round(2)

"""## Matrice operations"""

mat1 = np.array([[1, 2, 3],
                 [1, 2, 3]])

mat2 = np.array([[2, 2, 2],
                 [2, 2, 2]])

mat2 = np.transpose(mat2)

mat_multiplication = np.matmul(mat1, mat2)
print("Matrix multiplication:")
print(mat_multiplication)

"""## Create a sinusoidal signal"""

x = np.linspace(0, 2*np.pi, 1000)

x.shape

y1 = np.sin(x)

y1.shape

"""## Plot the signal"""

plt.figure(figsize=(3, 2))
plt.plot(y1)
plt.show()

plt.figure(figsize=(3, 2))
plt.plot(x, y1)
plt.show()

y2 = -np.cos(x) + 1
plt.figure(figsize=(3, 2))
plt.plot(x, y2)
plt.show()

"""## Plot multiple signals

colors: r, g, b, c, m, y, k

styles: -, --, -., ., *, ...
"""

plt.figure(figsize=(5, 3))
plt.plot(x, y1, 'm-.', label='sin(x)')
plt.plot(x, y2, 'g--', label='-cos(x)+1')
plt.title('My signals')
plt.xlabel('time')
plt.ylabel('amplitude')
plt.legend()
plt.show()

